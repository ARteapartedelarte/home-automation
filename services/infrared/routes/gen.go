// Code generated by jrpc. DO NOT EDIT.

package routes

import (
	context "context"

	router "github.com/jakewright/home-automation/libraries/go/router"
	taxi "github.com/jakewright/home-automation/libraries/go/taxi"
	def "github.com/jakewright/home-automation/services/infrared/def"
)

type service interface {
	GetDevice(ctx *context.Context, body *def.GetDeviceRequest) (*def.GetDeviceResponse, error)
	UpdateDevice(ctx *context.Context, body *def.UpdateDeviceRequest) (*def.UpdateDeviceResponse, error)
}

// NewRouter creates a new router for this service
func NewRouter(s service) *router.Router {
	r := router.New()

	r.RegisterHandler("GET", "/device", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.GetDeviceRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return s.GetDevice(ctx, body)
	})

	r.RegisterHandler("PATCH", "/device", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.UpdateDeviceRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return s.UpdateDevice(ctx, body)
	})

	return r
}
